NGINX
    - It is a web server and a reverse proxy
    - Serves static content, load balancing and handles HTTP/HTTPS requests 

    1. Web servers
     - Using configuration a directory from NGINX can be specified which serves static files ex. location /static {...}

    2. Reverse proxy 
        - Acting as a gateway between client and multiple backend servers
        - [Forward proxy : Multiple clients and single backend server]
        - Creates single point of access, carries out routing and load distribution

    3. Load balancing
        - Distributing incoming traffic among multiple servers, avoiding single server overload
        - Uses following load balancing algos
        a. Round Robin : Even traffic   distribution in rotating manner
        b. Least Connections : Routes traffic to server with least Connections
        c. IP hash : Maintains session persistance, Routes user based on client's IP address
    
    4. Content Caching
        - Caches the static and dynamic content to reduce load on servers
        - Temporarily stores responses to frequent requests, NGINX serves cached responses directly rather than processing request afresh

    5. SSL Termination 
        - SSL certifications are configured in NGNIX's configuration file, used for encryption and secure client-server communicae.
    
    6. Reverse Proxy for Microservices 
        - Makes microservices management easy by acting as unified entry point, routing requests to appropriate service based on URL pattterns.
        - Makes it easier to scale indivisual services independently.

    
NGINX Configuraion Terms : 
    
    1. Server block : Defines server configuration for particular domain or IP, specifying how requests to that server should be handled.

    2. Location Block : Used within a server blocks to handle specific URL patterns. Ex. location /static/ serves static files.

        a. location /api/ { ... }
            Purpose:
            Specifies how NGINX should handle requests that start with /api/.
            - Requests like http://yourdomain.com/api/some-endpoint will be processed using this block.

        b. proxy_pass https://creators-hub-ik2d.onrender.com/api/;
            Purpose:
            Defines the upstream server to which requests should be forwarded.
            - Requests to http://yourdomain.com/api/ are forwarded to https://creators-hub-ik2d.onrender.com/api/.

        c. proxy_set_header Host $host;
            Purpose:
            Sets the Host header in the proxied request to the value of $host, which represents the original hostname of the client request.
            - Helps the backend server recognize the original hostname instead of the NGINX server's hostname.

        d. proxy_set_header X-Real_IP $remote_addr;
            Purpose:
            Adds the client's real IP address ($remote_addr) to the X-Real-IP header.
            - The backend server can identify the original client's IP address, which is useful for logging, analytics, or security.

        f. proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            Purpose:
            Appends the client's IP address to the X-Forwarded-For header.
            - The backend can track the chain of client IPs if the request passed through multiple proxies.

        g. d. proxy_set_header X-Forwarded-Proto $scheme;
            Purpose:
            Sets the X-Forwarded-Proto header to the scheme (http or https) of the original client request.
            - Helps the backend determine whether the original request was made over HTTP or HTTPS.


            Host becomes the original hostname.
            X-Real-IP contains the clientâ€™s IP address.
            X-Forwarded-For tracks the request's proxy chain.
            X-Forwarded-Proto informs the backend of the original request protocol.

    3. Proxy pass : Directs NGNIX to forward requests to another server or service, essential for using NGNIX as a reverse proxy.

    4. Upstream : Defines a group of backend servers for load balancing.
                  To group one or more servers under a single name.
                  To distribute client requests among the servers using a   load-balancing strategy.
                  To manage failover in case one or more servers go down.
                  Key Syntax:
                 
                    upstream name {
                      server address[:port] [parameters] for ex. [weight=3 # Handles 3x traffic]; 
                      server address[:port] [parameters];
                      ...
                      server 192.168.0.101:5000;  # Server 1
                      server 192.168.0.102:5000;  # Server 2
                      ...
                  }

        parameters : 
            1. weight:
                Adjusts the proportion of traffic sent to a server.
                Default is 1.
            
            2. max_fails:
                Specifies how many times a server is allowed to fail before being considered unavailable.
                Example:
                server 192.168.0.101:5000 max_fails=3;

            3. fail_timeout:
                Time during which max_fails failures must occur for the server to be marked as unavailable.
                Example:
                server 192.168.0.101:5000 fail_timeout=10s;

            4. backup:
                Marks the server as a backup, used only if all other servers fail.
                Example:
                server 192.168.0.103:5000 backup;   

    5. http block : The http block is the main configuration context for handling HTTP traffic in NGINX. It defines global settings and behaviors for HTTP requests.

    The upstream block facilitates load balancing or request routing.








SSL / TLS : Secure Sockets Layer and Transport Layer Security

    - TLS provides stronger encryption and improved security over SSL.
    - It is used to verify server's identity to prevent attack from malicious server, phishing and man-in-middle attacks.
    - Encryption to prevent sensitive information, allows data integrity.

    a. Handshake : SSL/TLS begins with handshake between client and server, with exchange of crytographic keys
      
      Asymmetric Encryption
       - 1. First server shares its public key with client. 
       - 2. Client encrypts a session key with that public key.
       - 3. This session key can only be decrypted by server's private key.
       
      Symmetric Encryption 
       - 4. After handshake is complete both client and server switch to symmetric encryption i.e using session key for faster communication.

    Components: 
    1. Public key : Allows encryption of data which can be decrypted by private key.
    2. Private key : Kept on server, decrypts the public key.
    3. Digital Signature : It is a signature from Certificate Authority (CA) that validates authenticity of certificate.Ex globalSign, DigiCert
    4. Certificate Details : Has info about certificate holder, domain name, issuing authority, expiration date and cryptographic algorithms used.

    Benefits : 
       Security : encryption of data.
       SEO : Search Engine like google favor HTTPS websites, SSL/TLS certificate can boost search rankings.
       Trust : Virtual indicators like padlock for trust from visitors

    IMP : A http connection or URL converts to https one only when SSL/TLS certificates are in place. 

    They are placed on web servers like Apache or NGINX.

